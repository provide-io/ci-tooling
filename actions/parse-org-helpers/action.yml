name: 'Parse Organization Helpers'
description: 'Parse GH_ORG_HELPERS JSON and display helper token permissions with privacy-conscious logging'
author: 'provide.io llc'

inputs:
  helpers-env-var:
    description: 'Environment variable containing JSON of org:token pairs'
    required: false
    default: 'GH_ORG_HELPERS'
  log-level:
    description: 'Logging level: minimal, standard, detailed'
    required: false
    default: 'standard'

outputs:
  helpers-count:
    description: 'Number of helper organizations found'
    value: ${{ steps.parse.outputs.count }}
  helpers-summary:
    description: 'Summary of all helper tokens (JSON)'
    value: ${{ steps.parse.outputs.summary }}

runs:
  using: 'composite'
  steps:
    - name: üîê Parse Organization Helpers
      id: parse
      shell: bash
      run: |
        set +e  # Don't fail on errors - this is informational

        echo "üîç Parsing organization helper tokens..."

        # Get the environment variable value
        HELPERS_VAR_NAME="${{ inputs.helpers-env-var }}"
        HELPERS_JSON="${!HELPERS_VAR_NAME}"

        if [ -z "$HELPERS_JSON" ]; then
          echo "‚ÑπÔ∏è No $HELPERS_VAR_NAME environment variable found"
          echo "‚ÑπÔ∏è Using public repository access only"
          echo "count=0" >> $GITHUB_OUTPUT
          echo "summary={}" >> $GITHUB_OUTPUT
          echo "## üîê Organization Helpers" >> $GITHUB_STEP_SUMMARY
          echo "No helper tokens configured - using public access only." >> $GITHUB_STEP_SUMMARY
          exit 0
        fi

        # Validate JSON format
        if ! echo "$HELPERS_JSON" | jq . >/dev/null 2>&1; then
          echo "‚ö†Ô∏è Invalid JSON format in $HELPERS_VAR_NAME"
          echo "count=0" >> $GITHUB_OUTPUT
          echo "summary={}" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Count helpers
        HELPER_COUNT=$(echo "$HELPERS_JSON" | jq 'length')
        echo "count=$HELPER_COUNT" >> $GITHUB_OUTPUT

        echo "üìä Found $HELPER_COUNT organization helper(s)"
        echo ""

        # Initialize summary object
        SUMMARY_JSON="{}"

        # Process each organization
        echo "$HELPERS_JSON" | jq -r 'to_entries[] | "\(.key):\(.value)"' | while IFS=':' read -r org token; do
          # Get display format (first and last character)
          first_char="${org:0:1}"
          last_char="${org: -1}"
          display_name="${first_char}‚Ä¶${last_char}"

          echo "üîç Processing helper: $display_name"

          # Basic token validation
          if [[ ! "$token" =~ ^(ghp_|github_pat_) ]]; then
            echo "  ‚ö†Ô∏è Token doesn't appear to be a valid GitHub PAT"
          fi

          # Get token information via GitHub API
          if command -v curl >/dev/null 2>&1; then
            # Test token validity and get user info
            USER_INFO=$(curl -s -H "Authorization: token $token" \
              "https://api.github.com/user" 2>/dev/null)

            if echo "$USER_INFO" | jq -e '.login' >/dev/null 2>&1; then
              USERNAME=$(echo "$USER_INFO" | jq -r '.login')
              echo "  ‚úÖ Valid token for user: $USERNAME"

              # Get token scopes from rate limit endpoint (includes scope info)
              RATE_INFO=$(curl -s -H "Authorization: token $token" \
                "https://api.github.com/rate_limit" 2>/dev/null)

              if echo "$RATE_INFO" | jq -e '.rate' >/dev/null 2>&1; then
                LIMIT=$(echo "$RATE_INFO" | jq -r '.rate.limit')
                REMAINING=$(echo "$RATE_INFO" | jq -r '.rate.remaining')
                RESET=$(echo "$RATE_INFO" | jq -r '.rate.reset')

                echo "  üìä Rate limit: $REMAINING/$LIMIT remaining"

                if [ "${{ inputs.log-level }}" = "detailed" ]; then
                  echo "  üîÑ Reset time: $(date -d @$RESET 2>/dev/null || echo $RESET)"
                fi

                # Get repository permissions (test with a known public repo)
                REPO_TEST=$(curl -s -o /dev/null -w "%{http_code}" \
                  -H "Authorization: token $token" \
                  "https://api.github.com/repos/$org/non-existent-repo-test" 2>/dev/null)

                if [ "$REPO_TEST" = "404" ]; then
                  echo "  üîë Has repository access permissions"
                elif [ "$REPO_TEST" = "200" ]; then
                  echo "  üîë Has full repository access"
                else
                  echo "  ‚ö†Ô∏è Limited or no repository access (HTTP $REPO_TEST)"
                fi

                # Build helper data structure
                HELPER_DATA=$(jq -n \
                  --arg org "$org" \
                  --arg display "$display_name" \
                  --arg username "$USERNAME" \
                  --arg limit "$LIMIT" \
                  --arg remaining "$REMAINING" \
                  --arg reset "$RESET" \
                  '{
                    org: $org,
                    display: $display,
                    username: $username,
                    rate_limit: {
                      limit: ($limit | tonumber),
                      remaining: ($remaining | tonumber),
                      reset: ($reset | tonumber)
                    },
                    status: "valid"
                  }')

                # Add to summary (this will only work in the last iteration due to subshell)
                # We'll output individual entries instead
                echo "helper_data_${org//-/_}<<EOF" >> $GITHUB_OUTPUT
                echo "$HELPER_DATA" >> $GITHUB_OUTPUT
                echo "EOF" >> $GITHUB_OUTPUT

              else
                echo "  ‚ùå Failed to get rate limit info"
              fi
            else
              echo "  ‚ùå Invalid or expired token"
            fi
          else
            echo "  ‚ö†Ô∏è curl not available - cannot validate token"
          fi

          echo ""
        done

        # Create summary for step summary
        echo "## üîê Organization Helpers Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Total helpers configured:** $HELPER_COUNT" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "$HELPER_COUNT" -gt 0 ]; then
          echo "| Organization | Status | User | Rate Limit |" >> $GITHUB_STEP_SUMMARY
          echo "|--------------|--------|------|------------|" >> $GITHUB_STEP_SUMMARY

          # Re-process for summary table
          echo "$HELPERS_JSON" | jq -r 'to_entries[] | "\(.key):\(.value)"' | while IFS=':' read -r org token; do
            first_char="${org:0:1}"
            last_char="${org: -1}"
            display_name="${first_char}‚Ä¶${last_char}"

            if command -v curl >/dev/null 2>&1; then
              USER_INFO=$(curl -s -H "Authorization: token $token" \
                "https://api.github.com/user" 2>/dev/null)

              if echo "$USER_INFO" | jq -e '.login' >/dev/null 2>&1; then
                USERNAME=$(echo "$USER_INFO" | jq -r '.login')

                RATE_INFO=$(curl -s -H "Authorization: token $token" \
                  "https://api.github.com/rate_limit" 2>/dev/null)

                if echo "$RATE_INFO" | jq -e '.rate' >/dev/null 2>&1; then
                  REMAINING=$(echo "$RATE_INFO" | jq -r '.rate.remaining')
                  LIMIT=$(echo "$RATE_INFO" | jq -r '.rate.limit')
                  echo "| $display_name | ‚úÖ Valid | $USERNAME | $REMAINING/$LIMIT |" >> $GITHUB_STEP_SUMMARY
                else
                  echo "| $display_name | ‚ùì Unknown | $USERNAME | - |" >> $GITHUB_STEP_SUMMARY
                fi
              else
                echo "| $display_name | ‚ùå Invalid | - | - |" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "| $display_name | ‚ùì No curl | - | - |" >> $GITHUB_STEP_SUMMARY
            fi
          done
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*Organization names are displayed as first‚Ä¶last character for privacy*" >> $GITHUB_STEP_SUMMARY

        # Set summary output
        echo "summary={\"count\":$HELPER_COUNT,\"processed\":true}" >> $GITHUB_OUTPUT

        set -e  # Re-enable exit on error

branding:
  icon: 'key'
  color: 'blue'