name: 'Python Security Scan'
description: 'Run security scanning with bandit, safety, and pip-audit'
author: 'provide.io llc'

inputs:
  source-paths:
    description: 'Paths to scan for security issues'
    required: false
    default: 'src/'
  scan-dependencies:
    description: 'Scan dependencies for vulnerabilities'
    required: false
    default: 'true'
  scan-code:
    description: 'Scan code for security issues'
    required: false
    default: 'true'
  severity-threshold:
    description: 'Minimum severity level (low, medium, high)'
    required: false
    default: 'medium'
  ignore-ids:
    description: 'Comma-separated list of vulnerability IDs to ignore'
    required: false
    default: ''
  bandit-config:
    description: 'Path to bandit configuration file'
    required: false
    default: ''
  fail-on-findings:
    description: 'Fail action if security issues found'
    required: false
    default: 'true'
  workenv-path:
    description: 'Path to workenv directory'
    required: false
    default: './workenv'
  generate-sarif:
    description: 'Generate SARIF report for GitHub Security tab'
    required: false
    default: 'true'

outputs:
  bandit-issues:
    description: 'Number of bandit security issues found'
    value: ${{ steps.bandit.outputs.issues }}
  dependency-vulnerabilities:
    description: 'Number of dependency vulnerabilities found'
    value: ${{ steps.deps.outputs.vulnerabilities }}
  security-passed:
    description: 'Whether all security checks passed'
    value: ${{ steps.summary.outputs.passed }}
  sarif-file:
    description: 'Path to generated SARIF file'
    value: ${{ steps.sarif.outputs.file }}

runs:
  using: 'composite'
  steps:
    - name: üîí Install security tools
      shell: bash
      run: |
        source "${{ inputs.workenv-path }}/bin/activate"

        echo "üì¶ Installing security scanning tools..."

        # Install security tools
        if [ "${{ inputs.scan-code }}" = "true" ]; then
          pip list | grep -q bandit || uv pip install bandit
        fi

        if [ "${{ inputs.scan-dependencies }}" = "true" ]; then
          pip list | grep -q safety || uv pip install safety
          pip list | grep -q pip-audit || uv pip install pip-audit
        fi

        if [ "${{ inputs.generate-sarif }}" = "true" ]; then
          pip list | grep -q bandit-sarif-formatter || uv pip install bandit-sarif-formatter
        fi

    - name: üîí Run Bandit Code Security Scan
      id: bandit
      if: inputs.scan-code == 'true'
      shell: bash
      run: |
        source "${{ inputs.workenv-path }}/bin/activate"

        echo "üîç Running bandit security scan on: ${{ inputs.source-paths }}"

        BANDIT_CMD="bandit -r ${{ inputs.source-paths }}"

        # Add custom config if provided
        if [ -n "${{ inputs.bandit-config }}" ]; then
          BANDIT_CMD="$BANDIT_CMD -c ${{ inputs.bandit-config }}"
        fi

        # Add severity filter
        case "${{ inputs.severity-threshold }}" in
          "high")
            BANDIT_CMD="$BANDIT_CMD -ll"
            ;;
          "medium")
            BANDIT_CMD="$BANDIT_CMD -l"
            ;;
          "low")
            # Include all severities (default)
            ;;
        esac

        # Run bandit and capture results
        ISSUES=0
        if ! $BANDIT_CMD -f json -o bandit-results.json; then
          # Count issues from JSON output
          if [ -f "bandit-results.json" ]; then
            ISSUES=$(python3 -c 'import json; f=open("bandit-results.json"); d=json.load(f); print(len(d.get("results", []))); f.close()' 2>/dev/null || echo "0")
          fi
        fi

        echo "issues=$ISSUES" >> $GITHUB_OUTPUT
        echo "üîí Found $ISSUES bandit security issues"

        # Generate human-readable report
        if [ -f "bandit-results.json" ]; then
          $BANDIT_CMD -f txt > bandit-report.txt || true
        fi

    - name: üîí Run Dependency Security Scan
      id: deps
      if: inputs.scan-dependencies == 'true'
      shell: bash
      run: |
        source "${{ inputs.workenv-path }}/bin/activate"

        echo "üîç Scanning dependencies for vulnerabilities..."

        VULNS=0

        # Run safety check
        echo "Running safety check..."
        if ! safety check --json --output safety-results.json; then
          if [ -f "safety-results.json" ]; then
            SAFETY_VULNS=$(python3 -c 'import json; f=open("safety-results.json"); d=json.load(f); print(len(d)); f.close()' 2>/dev/null || echo "0")
            VULNS=$((VULNS + SAFETY_VULNS))
            echo "üîí Safety found $SAFETY_VULNS vulnerabilities"
          fi
        fi

        # Run pip-audit
        echo "Running pip-audit..."
        if ! pip-audit --format=json --output=pip-audit-results.json; then
          if [ -f "pip-audit-results.json" ]; then
            AUDIT_VULNS=$(python3 -c 'import json; f=open("pip-audit-results.json"); d=json.load(f); print(len(d.get("vulnerabilities", []))); f.close()' 2>/dev/null || echo "0")
            VULNS=$((VULNS + AUDIT_VULNS))
            echo "üîí pip-audit found $AUDIT_VULNS vulnerabilities"
          fi
        fi

        echo "vulnerabilities=$VULNS" >> $GITHUB_OUTPUT
        echo "üîí Total dependency vulnerabilities: $VULNS"

    - name: üìÑ Generate SARIF Report
      id: sarif
      if: inputs.generate-sarif == 'true' && inputs.scan-code == 'true'
      shell: bash
      run: |
        source "${{ inputs.workenv-path }}/bin/activate"

        if [ -f "bandit-results.json" ]; then
          echo "üìÑ Converting bandit results to SARIF format..."

          # Create simple SARIF report (simplified for now)
          echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"bandit"}},"results":[]}]}' > security-results.sarif
          echo "üìÑ Basic SARIF report generated"
          echo "file=security-results.sarif" >> $GITHUB_OUTPUT
        fi

    - name: üì§ Upload Security Reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-results.json
          bandit-report.txt
          safety-results.json
          pip-audit-results.json
          security-results.sarif
        retention-days: 30

    - name: üìä Security Summary
      id: summary
      shell: bash
      run: |
        BANDIT_ISSUES="${{ steps.bandit.outputs.issues || 0 }}"
        DEP_VULNS="${{ steps.deps.outputs.vulnerabilities || 0 }}"

        echo "## üîí Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Tool | Result | Count |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|-------|" >> $GITHUB_STEP_SUMMARY

        if [ "${{ inputs.scan-code }}" = "true" ]; then
          echo "| Bandit (Code) | $([ "$BANDIT_ISSUES" -eq 0 ] && echo "‚úÖ Clean" || echo "‚ö†Ô∏è Issues") | $BANDIT_ISSUES issues |" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ inputs.scan-dependencies }}" = "true" ]; then
          echo "| Dependencies | $([ "$DEP_VULNS" -eq 0 ] && echo "‚úÖ Clean" || echo "‚ö†Ô∏è Vulnerabilities") | $DEP_VULNS vulnerabilities |" >> $GITHUB_STEP_SUMMARY
        fi

        TOTAL_ISSUES=$((BANDIT_ISSUES + DEP_VULNS))
        if [ "$TOTAL_ISSUES" -eq 0 ]; then
          echo "passed=true" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üéâ **No security issues found!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "passed=false" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ö†Ô∏è **Security issues found:** $TOTAL_ISSUES total" >> $GITHUB_STEP_SUMMARY

          if [ "${{ inputs.fail-on-findings }}" = "true" ]; then
            echo "‚ùå Failing due to security findings"
            exit 1
          fi
        fi

branding:
  icon: 'shield'
  color: 'red'