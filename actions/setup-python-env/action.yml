name: 'Setup Python Environment'
description: 'Setup Python, UV, and workenv for provide.io projects'
author: 'provide.io llc'

inputs:
  python-version:
    description: 'Python version to install'
    required: false
    default: '3.11'
  uv-version:
    description: 'UV package manager version'
    required: false
    default: '0.7.8'
  workenv-path:
    description: 'Path to create workenv directory'
    required: false
    default: './workenv'
  cache-dependencies:
    description: 'Enable dependency caching'
    required: false
    default: 'true'
  install-extras:
    description: 'Package extras to install (comma-separated)'
    required: false
    default: 'dev'
  project-path:
    description: 'Path to project root (for editable install)'
    required: false
    default: '.'

outputs:
  python-version:
    description: 'Installed Python version'
    value: ${{ steps.python.outputs.python-version }}
  uv-version:
    description: 'Installed UV version'
    value: ${{ steps.uv.outputs.version }}
  workenv-path:
    description: 'Path to workenv directory'
    value: ${{ steps.workenv.outputs.path }}
  cache-hit:
    description: 'Whether dependency cache was hit'
    value: ${{ steps.cache.outputs.cache-hit }}

runs:
  using: 'composite'
  steps:
    - name: 🐍 Setup Python
      id: python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: ⚡ Install UV
      id: uv
      uses: astral-sh/setup-uv@v4
      with:
        version: ${{ inputs.uv-version }}
        enable-cache: ${{ inputs.cache-dependencies }}

    - name: 📦 Create workenv directory
      id: workenv
      shell: bash
      run: |
        WORKENV_PATH="${{ inputs.workenv-path }}"
        echo "Creating workenv at: $WORKENV_PATH"
        uv venv "$WORKENV_PATH"
        echo "path=$WORKENV_PATH" >> $GITHUB_OUTPUT
        echo "$WORKENV_PATH/bin" >> $GITHUB_PATH

    - name: 🔑 Setup dependency cache
      id: cache
      if: inputs.cache-dependencies == 'true'
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          ${{ inputs.workenv-path }}
        key: uv-${{ runner.os }}-python${{ inputs.python-version }}-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
        restore-keys: |
          uv-${{ runner.os }}-python${{ inputs.python-version }}-

    - name: 📥 Install project dependencies
      shell: bash
      run: |
        source "${{ inputs.workenv-path }}/bin/activate"

        # Check if pyproject.toml exists
        if [ -f "${{ inputs.project-path }}/pyproject.toml" ]; then
          echo "📦 Installing from pyproject.toml"
          if [ -n "${{ inputs.install-extras }}" ]; then
            echo "🔧 Installing with extras: ${{ inputs.install-extras }}"
            uv pip install -e "${{ inputs.project-path }}[${{ inputs.install-extras }}]"
          else
            uv pip install -e "${{ inputs.project-path }}"
          fi
        elif [ -f "${{ inputs.project-path }}/requirements.txt" ]; then
          echo "📦 Installing from requirements.txt"
          uv pip install -r "${{ inputs.project-path }}/requirements.txt"
        else
          echo "⚠️ No pyproject.toml or requirements.txt found, skipping dependency installation"
        fi

    - name: 🔍 Verify installation
      shell: bash
      run: |
        source "${{ inputs.workenv-path }}/bin/activate"
        echo "## 🐍 Python Environment Setup Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Python version:** $(python --version)" >> $GITHUB_STEP_SUMMARY
        echo "- **UV version:** $(uv --version)" >> $GITHUB_STEP_SUMMARY
        echo "- **Workenv path:** ${{ inputs.workenv-path }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Pip packages:** $(pip list --format=freeze | wc -l) installed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

branding:
  icon: 'package'
  color: 'blue'