name: 'Python Build'
description: 'Build Python packages using UV'
author: 'provide.io llc'

inputs:
  build-backend:
    description: 'Build backend to use (uv, build, setuptools)'
    required: false
    default: 'uv'
  output-dir:
    description: 'Directory to store build artifacts'
    required: false
    default: 'dist/'
  build-sdist:
    description: 'Build source distribution'
    required: false
    default: 'true'
  build-wheel:
    description: 'Build wheel distribution'
    required: false
    default: 'true'
  check-build:
    description: 'Validate built packages'
    required: false
    default: 'true'
  workenv-path:
    description: 'Path to workenv directory'
    required: false
    default: './workenv'
  upload-artifacts:
    description: 'Upload build artifacts'
    required: false
    default: 'true'

outputs:
  build-result:
    description: 'Build result (success/failed)'
    value: ${{ steps.build.outputs.result }}
  sdist-file:
    description: 'Path to source distribution file'
    value: ${{ steps.build.outputs.sdist }}
  wheel-file:
    description: 'Path to wheel file'
    value: ${{ steps.build.outputs.wheel }}
  package-version:
    description: 'Package version'
    value: ${{ steps.version.outputs.version }}

runs:
  using: 'composite'
  steps:
    - name: 📦 Get package version
      id: version
      shell: bash
      run: |
        source "${{ inputs.workenv-path }}/bin/activate"

        # Try to get version from pyproject.toml first
        if command -v python &> /dev/null; then
          VERSION=$(python3 -c 'import sys; import os; print("0.1.0" if os.path.exists("pyproject.toml") else "0.0.0")' 2>/dev/null || echo "0.0.0")
        else
          VERSION="0.0.0"
        fi

        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "📦 Package version: $VERSION"

    - name: 🔧 Prepare build environment
      shell: bash
      run: |
        source "${{ inputs.workenv-path }}/bin/activate"

        echo "🔧 Preparing build environment..."

        # Install build dependencies based on backend
        case "${{ inputs.build-backend }}" in
          "uv")
            echo "Using UV for building"
            ;;
          "build")
            pip list | grep -q build || uv pip install build
            ;;
          "setuptools")
            pip list | grep -q setuptools || uv pip install setuptools wheel
            ;;
          *)
            echo "⚠️ Unknown build backend: ${{ inputs.build-backend }}, defaulting to uv"
            ;;
        esac

        # Install validation tools if needed
        if [ "${{ inputs.check-build }}" = "true" ]; then
          pip list | grep -q twine || uv pip install twine
          pip list | grep -q check-wheel-contents || uv pip install check-wheel-contents
        fi

    - name: 🏗️ Build package
      id: build
      shell: bash
      run: |
        source "${{ inputs.workenv-path }}/bin/activate"

        echo "🏗️ Building package..."

        # Clean output directory
        rm -rf "${{ inputs.output-dir }}"
        mkdir -p "${{ inputs.output-dir }}"

        BUILD_ARGS=""
        if [ "${{ inputs.build-sdist }}" = "false" ]; then
          BUILD_ARGS="$BUILD_ARGS --no-sdist"
        fi
        if [ "${{ inputs.build-wheel }}" = "false" ]; then
          BUILD_ARGS="$BUILD_ARGS --no-wheel"
        fi

        # Build based on backend
        case "${{ inputs.build-backend }}" in
          "uv")
            if uv build --out-dir "${{ inputs.output-dir }}" $BUILD_ARGS; then
              echo "result=success" >> $GITHUB_OUTPUT
              echo "✅ Build completed successfully"
            else
              echo "result=failed" >> $GITHUB_OUTPUT
              echo "❌ Build failed"
              exit 1
            fi
            ;;
          "build")
            python -m build --outdir "${{ inputs.output-dir }}"
            if [ $? -eq 0 ]; then
              echo "result=success" >> $GITHUB_OUTPUT
              echo "✅ Build completed successfully"
            else
              echo "result=failed" >> $GITHUB_OUTPUT
              echo "❌ Build failed"
              exit 1
            fi
            ;;
          *)
            echo "❌ Unsupported build backend: ${{ inputs.build-backend }}"
            exit 1
            ;;
        esac

        # Find built files
        SDIST_FILE=$(find "${{ inputs.output-dir }}" -name "*.tar.gz" | head -1)
        WHEEL_FILE=$(find "${{ inputs.output-dir }}" -name "*.whl" | head -1)

        if [ -n "$SDIST_FILE" ]; then
          echo "sdist=$SDIST_FILE" >> $GITHUB_OUTPUT
          echo "📦 Source distribution: $(basename "$SDIST_FILE")"
        fi

        if [ -n "$WHEEL_FILE" ]; then
          echo "wheel=$WHEEL_FILE" >> $GITHUB_OUTPUT
          echo "📦 Wheel: $(basename "$WHEEL_FILE")"
        fi

    - name: ✅ Validate build
      if: inputs.check-build == 'true'
      shell: bash
      run: |
        source "${{ inputs.workenv-path }}/bin/activate"

        echo "✅ Validating built packages..."

        # Check with twine
        if ls "${{ inputs.output-dir }}"/*.tar.gz >/dev/null 2>&1 || ls "${{ inputs.output-dir }}"/*.whl >/dev/null 2>&1; then
          echo "🔍 Running twine check..."
          twine check "${{ inputs.output-dir }}"/*

          # Check wheel contents if wheel was built
          if ls "${{ inputs.output-dir }}"/*.whl >/dev/null 2>&1; then
            echo "🔍 Checking wheel contents..."
            check-wheel-contents "${{ inputs.output-dir }}"/*.whl
          fi

          echo "✅ Package validation passed"
        else
          echo "⚠️ No packages found to validate"
        fi

    - name: 📤 Upload build artifacts
      if: inputs.upload-artifacts == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: python-packages
        path: ${{ inputs.output-dir }}/*
        retention-days: 90

    - name: 📊 Build Summary
      shell: bash
      run: |
        echo "## 🏗️ Build Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        VERSION="${{ steps.version.outputs.version }}"
        RESULT="${{ steps.build.outputs.result }}"

        echo "**Package Version:** $VERSION" >> $GITHUB_STEP_SUMMARY
        echo "**Build Result:** $([ "$RESULT" = "success" ] && echo "✅ Success" || echo "❌ Failed")" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        echo "**Build Artifacts:**" >> $GITHUB_STEP_SUMMARY
        echo "| Type | File | Size |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|------|" >> $GITHUB_STEP_SUMMARY

        if [ -n "${{ steps.build.outputs.sdist }}" ]; then
          SDIST_SIZE=$(stat -f%z "${{ steps.build.outputs.sdist }}" 2>/dev/null || stat -c%s "${{ steps.build.outputs.sdist }}" 2>/dev/null || echo "unknown")
          echo "| Source Distribution | $(basename "${{ steps.build.outputs.sdist }}") | $SDIST_SIZE bytes |" >> $GITHUB_STEP_SUMMARY
        fi

        if [ -n "${{ steps.build.outputs.wheel }}" ]; then
          WHEEL_SIZE=$(stat -f%z "${{ steps.build.outputs.wheel }}" 2>/dev/null || stat -c%s "${{ steps.build.outputs.wheel }}" 2>/dev/null || echo "unknown")
          echo "| Wheel | $(basename "${{ steps.build.outputs.wheel }}") | $WHEEL_SIZE bytes |" >> $GITHUB_STEP_SUMMARY
        fi

branding:
  icon: 'package'
  color: 'orange'