name: 'Setup GitHub Auth'
description: 'Parse and configure git authentication for private repositories using organization helper tokens'
author: 'provide.io llc'

inputs:
  helpers-env-var:
    description: 'Environment variable containing the organization helper tokens JSON'
    required: false
    default: 'GH_ORG_HELPERS'
  log-level:
    description: 'Logging level: minimal, standard, detailed'
    required: false
    default: 'standard'

outputs:
  helpers-count:
    description: 'Number of helper organizations found'
    value: ${{ steps.setup.outputs.helpers-count }}
  configured-orgs:
    description: 'List of configured organizations'
    value: ${{ steps.setup.outputs.configured-orgs }}

runs:
  using: 'composite'
  steps:
    - name: 🔐 Parse and Configure GitHub Authentication
      id: setup
      shell: bash
      run: |
        # Get the environment variable value
        HELPERS_VAR_NAME="${{ inputs.helpers-env-var }}"
        HELPERS_JSON="${!HELPERS_VAR_NAME}"

        if [ -z "$HELPERS_JSON" ]; then
          echo "ℹ️ No $HELPERS_VAR_NAME found - using public access only"
          echo "helpers-count=0" >> $GITHUB_OUTPUT
          echo "configured-orgs=" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Validate JSON format
        if ! echo "$HELPERS_JSON" | python3 -m json.tool >/dev/null 2>&1; then
          echo "❌ Invalid JSON format in $HELPERS_VAR_NAME"
          echo "helpers-count=0" >> $GITHUB_OUTPUT
          echo "configured-orgs=" >> $GITHUB_OUTPUT
          exit 1
        fi

        echo "🔧 Parsing and configuring GitHub authentication..."

        # Create temporary Python script
        cat > /tmp/setup_auth.py << 'EOF'
import json
import subprocess
import sys
import os

helpers = json.load(sys.stdin)
configured_orgs = []
total_count = len(helpers)

log_level = os.environ.get('LOG_LEVEL', 'standard')

print(f'📊 Found {total_count} organization helper(s)')

for org, token in helpers.items():
    display_org = f'{org[0]}...{org[-1]}' if len(org) > 2 else org

    if log_level != 'minimal':
        print(f'🔍 Processing: {display_org}')

    # Validate token format
    if not token.startswith(('ghp_', 'github_pat_')):
        print(f'  ⚠️ Token for {display_org} doesnt look like a GitHub PAT', file=sys.stderr)

    # Configure git to use token for this organization
    git_url = f'https://{token}@github.com/{org}/'
    insteadof_url = f'https://github.com/{org}/'

    try:
        subprocess.run([
            'git', 'config', '--global',
            f'url.{git_url}.insteadOf',
            insteadof_url
        ], check=True, capture_output=True)

        configured_orgs.append(org)

        if log_level != 'minimal':
            print(f'  ✅ Configured git access for {display_org}')

    except subprocess.CalledProcessError as e:
        print(f'❌ Failed to configure git for {display_org}: {e}', file=sys.stderr)
        sys.exit(1)

print(f'✅ Successfully configured {len(configured_orgs)} organizations')

# Write outputs to a temp file that bash can read
with open('/tmp/auth_outputs', 'w') as f:
    f.write(f'COUNT={len(configured_orgs)}\n')
    f.write(f'ORGS={",".join(configured_orgs)}\n')
EOF

        # Run the Python script
        echo "$HELPERS_JSON" | LOG_LEVEL="${{ inputs.log-level }}" python3 /tmp/setup_auth.py

        # Read outputs from Python script
        if [ -f "/tmp/auth_outputs" ]; then
          source /tmp/auth_outputs
          echo "helpers-count=$COUNT" >> $GITHUB_OUTPUT
          echo "configured-orgs=$ORGS" >> $GITHUB_OUTPUT
          rm -f /tmp/auth_outputs
        else
          echo "helpers-count=0" >> $GITHUB_OUTPUT
          echo "configured-orgs=" >> $GITHUB_OUTPUT
        fi

        # Cleanup
        rm -f /tmp/setup_auth.py

branding:
  icon: 'key'
  color: 'green'